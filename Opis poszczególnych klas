Aplikacja dzieli się na 5 modułów:

SECURITY

    Moduł zawiera klasę konfiguracyjną rozszerzającą klasę "WebSecurityConfigurerAdapter", pochodzącą z biblioteki Spring Security.
W klasie tej definiujemy endpointy, które nie mają zostać zabezpieczone. Wstrzykujemy również klasę "AuthenticationService", zapewniającą
logikę autoryzacji użytkowników.

CONTROLLER
-ContactController
    Klasa definiująca endpoint "/contact", który obsługuje operacje CRUD na obiekcie "Contact".
-HomeController
    Klasa definiująca główny endpoint "/home". Jej zadaniem jest przekazanie do szablonu HTML generowanego przez
bibliotekę ThymeLeaf obiektów użytych do generowania widoku aplikacji.
-SignUpController
    Klasa obsługująca endpoint "signup" oraz zapewniająca logikę obsługi błędów. (Niestety z powodu  niewystarczającej ilości czasu
jest to jedyna klasa w której zaimplementowałem obsługę błędów)

MAPPER
-Zawiera interfejsy biblioteki MyBatis. Każdy interfejs zawiera zapytania SQL do bazy danych jednocześnie mapując obiekty aplikacji i bazy danych.

MODEL
-Zawiera klasy POJO. Klasa "ConatactDao" została wprowadzona w celu przemapowania zmiennej "dateOfBirth" na poprawny typ.
Thymeleaf podczas generowania nowego kontaktu może przesłać wprowadzoną datę jedynie jako String, Dlatego w celu zapisania
daty do bazy w poprawnym typie potrzebne jest mapowanie.

SERVICES
-EncrytpionService
    jest to klasa odpowiadająca za zaszyfrowanie oraz odszyfrowanie haseł podanych w formularzu kontaktu.
-Authentication Service
    Klasa odpowiadająca za autoryzowanie użytkowników w aplikacji.
-ContactService
    Klasa zawierające logikę biznesową obsługi funkcjonalności CRUD aplikacji.
-HashService/UserService
    Klasy odpowiadające za udostępnienie logiki bezpiecznego tworzenia nowych użytkowników.
